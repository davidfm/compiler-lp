/**
    Copyright (C) 2012 David Fernández

LICENSE:

    This file is part of CalculatorCompiler.

    CalculatorCompiler is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CalculatorCompiler is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CalculatorCompiler. If not, see <http://www.gnu.org/licenses/>.

@author David Fernández <davidfm[at]linux[dot]com>
@license http://www.gnu.org/licenses
@copyright 2012 David Fernández

*/

import java_cup.runtime.*;
import java.io.*;
import es.davidfm.compiler.ast.structure.*;
import es.davidfm.compiler.ast.expression.*;
import es.davidfm.compiler.ast.statement.*;



parser code{:

	public static void main (String [] args) throws Exception{

		if (args.length!=1)
			System.out.println("Error. No file to process");
		else{
			try{
				
				Lexer lexer = new Lexer(new FileReader(args[0]));	
				new parser(lexer).parse();

			}catch(Exception e){
				
				System.out.println("Error");

			}			
	
	}
}	


:}





action code {:

	Program program;
	
	void init(){
	
		program = new Program();
	
	}
	
	
	void end(){
	
		System.out.println(program);
	
	}
	







:}


terminal String PLUS;
terminal String MINUS;
terminal String TIMES;
terminal String DIV;
terminal String LPAREN;
terminal String RPAREN;
terminal String LBRACE;
terminal String RBRACE;
terminal String LBRACKET;
terminal String RBRACKET;
terminal String INTEGER;
terminal String FLOAT;
terminal String BOOLEAN;
terminal String STRING;
terminal String SEMI;
terminal String COMMA;
terminal String ASSIGN;
terminal String MAIN;
terminal String PRINT;
terminal String PRINTLINE;
terminal String NUM_INTEGER;
terminal String NUM_FLOAT;
terminal String BOOL;
terminal String ID;
terminal String STRG;



non terminal Program Program;
non terminal Body;
non terminal Statement Statement;
non terminal Declaration;
non terminal AssignStatement Assign;
non terminal String Type;
non terminal Expression Expression;
//non terminal PrintStatement Print;
//non terminal PrintLineStatement Println;




precedence left STRG;
precedence left NUM_INTEGER;
precedence left NUM_FLOAT;
precedence right ID;


precedence left ASSIGN;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIV;
precedence left LPAREN, RPAREN;

start with Program;

Program ::= {: System.out.println("Beginning of the program");
			init();
			 :}		
 			MAIN LPAREN RPAREN LBRACE Body RBRACE
			{: end(); :};

		
Body ::= Statement Body | Statement;
			
Statement ::= Declaration 
			| Assign:a {: program.addToBody(a); :};
//			| Print 
//			| Println;
	
Declaration ::= Type:t ID:id SEMI
				{: if (program.containsVariable(id)){
					System.out.println("error");
					} else {
						Variable v = new Variable(t,id);
						program.addVariable(v);
					}

				:};
					
				
Assign ::= ID:id2 ASSIGN Expression:e SEMI
			{: if (program.containsVariable(id2)){
				Variable v = program.getVariable(id2);
				RESULT = new AssignStatement(v,e);
			} else {
				System.out.println("error");
			}

			:};

 		
Type ::= INTEGER {: RESULT = new String("int"); :}
		|FLOAT {: RESULT = new String("float"); :} 
		|STRING {: RESULT = new String("String"); :};

Expression ::= Expression:e1 PLUS Expression:e2 {: RESULT = new BinaryExpression("prueba","+",e1,e2); :}
|Expression:e1 MINUS Expression:e2 {: RESULT = new BinaryExpression("prueba","-",e1,e2); :}
|Expression:e1 TIMES Expression:e2 {: RESULT = new BinaryExpression("prueba","*",e1,e2); :}
|Expression:e1 DIV Expression:e2 {: RESULT = new BinaryExpression("prueba","/",e1,e2); :}	
|NUM_INTEGER:i {: RESULT = new IntegerLiteralExpression(i); :}
|NUM_FLOAT:f {: RESULT = new FloatLiteralExpression(f); :}
|STRG:s {: RESULT = new StringLiteralExpression(s); :}
|ID:id {: 	Variable v = program.getVariable(id);
			RESULT = new VariableExpression(v);
		:}
|LPAREN Expression:e RPAREN {: RESULT = e :}  ;
//Print ::= PRINT LPAREN ID RPAREN SEMI | PRINT LPAREN STRG RPAREN SEMI;
//Println ::= PRINTLINE LPAREN ID RPAREN SEMI | PRINTLINE LPAREN STRG RPAREN SEMI;

 
