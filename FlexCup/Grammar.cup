/**
    Copyright (C) 2012 David Fernández

LICENSE:

    This file is part of CalculatorCompiler.

    CalculatorCompiler is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CalculatorCompiler is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CalculatorCompiler. If not, see <http://www.gnu.org/licenses/>.

@author David Fernández <davidfm[at]linux[dot]com>
@license http://www.gnu.org/licenses
@copyright 2012 David Fernández

*/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import es.davidfm.compiler.AST.Structure.*;



parser code{:

	Lexer lexer;
	String outputFile;
	
	
	public SintacSem(Lexer lexer){
	
		super(lexer)
		this.lexer = lexer;
		outputFile="/myProgram.in";
		
	}
	
	


:};



scan with {:return lexer.next_token(); :};


action code {:

	Program program;
	
	void init(){
	
		program = new Program();
	
	}
	

}





:};


terminal String PLUS;
terminal String MINUS;
terminal String TIMES;
terminal String DIV;
terminal String LPAREN;
terminal String RPAREN;
terminal String LBRACE;
terminal String RBRACE;
terminal String LBRACKET;
terminal String RBRACKET;
terminal String INTEGER;
terminal String FLOAT;
terminal String BOOLEAN;
terminal String STRING;
terminal String SEMI;
terminal String COMMA;
terminal String ASSIGN;
terminal String MAIN;
terminal String PRINT;
terminal String PRINTLINE;
terminal String NUM_INTEGER;
terminal String NUM_FLOAT;
terminal String BOOL;
terminal String STRG;

terminal String ID;


non terminal Program Program,
non terminal BlockStatement Body
non terminal Statement Statement
non terminal Declaration
non terminal AssignStatement Assign
non terminal String Type
non terminal Expression Expression
non terminal String Type;
non terminal Print
non terminal Println



precedence left ASSIGN;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left LPAREN, RPAREN;

start with Program;

Program ::= {: System.out.println("Begining of the program");
			init(); :}		
 			MAIN LPAREN RPAREN LBRACE Body RBRACE;
 			
Body ::= 	{: program.setBody(new BlockStatement()); :}
			Statement Body | Statement;
			
Statement ::= Declaration 
			| Assign 
			| Print 
			| Println;

Declaration ::= Type:t ID:id SEMI
				{: if (program.containsVariable(id)){
					//error
					} else {
						Variable v = new Variable(t,id);
						program.addVariable(v);
					}
					
				
Assign ::= ID:id ASSIGN Expression:e SEMI
			{: if (program.containsVariable(id)){
				Variable v = program.getVariable(id);
				AssignStatement a = new AssignStatement(id,e);
			};
		
Type ::= INTEGER:i {: RESULT = new String("int"); :} 
					|FLOAT {: RESULT = new String("float"); :} 
					|STRING {: RESULT = new String("String"); :} ;
Expression ::= Expression PLUS Expression
|Expression MINUS Expression
|Expression TIMES Expression
|Expression DIV Expression
|NUM_INTEGER:i RESULT = new IntegerLiteralExpression(i); :}
|NUM_FLOAT:f RESULT = new FloatLiteralExpression(f); :}
|STRG:s {: RESULT = new StringLiteralExpression(s); :}
|ID:id {: 	Variable v = program.getVariable(id);
			RESULT = new VariableExpression(v);
		:}
|LPAREN Expression RPAREN;
Print ::= PRINT LPAREN ID RPAREN SEMI | PRINT LPAREN STRG RPAREN SEMI;
Println ::= PRINTLINE LPAREN ID RPAREN SEMI | PRINTLN LPAREN STRG RPAREN SEMI;


 