
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 26 18:19:29 EEST 2012
//----------------------------------------------------

package es.davidfm.compiler.analysis;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Iterator;
import es.davidfm.compiler.ast.structure.*;
import es.davidfm.compiler.ast.expression.*;
import es.davidfm.compiler.ast.statement.*;
import es.davidfm.compiler.generator.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 26 18:19:29 EEST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\015\002\000\002\002" +
    "\011\000\002\003\003\000\002\014\004\000\002\014\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\005\000\002" +
    "\006\006\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\011\007" +
    "\000\002\012\007\000\002\016\002\000\002\013\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\004\025\000\001\002\000\004\002\113\001" +
    "\002\000\004\025\006\001\002\000\004\010\007\001\002" +
    "\000\004\011\010\001\002\000\004\012\011\001\002\000" +
    "\020\016\013\017\031\021\022\026\025\027\016\033\024" +
    "\035\uffe0\001\002\000\004\033\111\001\002\000\004\033" +
    "\ufff4\001\002\000\022\013\ufff7\016\ufff7\017\ufff7\021\ufff7" +
    "\026\ufff7\027\ufff7\033\ufff7\035\ufff7\001\002\000\004\035" +
    "\102\001\002\000\004\010\076\001\002\000\022\013\ufff8" +
    "\016\ufff8\017\ufff8\021\ufff8\026\ufff8\027\ufff8\033\ufff8\035" +
    "\ufff8\001\002\000\022\013\ufffb\016\ufffb\017\ufffb\021\ufffb" +
    "\026\ufffb\027\ufffb\033\ufffb\035\ufffb\001\002\000\004\013" +
    "\ufffe\001\002\000\004\033\ufff2\001\002\000\022\013\ufffc" +
    "\016\013\017\031\021\022\026\025\027\016\033\024\035" +
    "\uffe0\001\002\000\004\024\037\001\002\000\004\010\033" +
    "\001\002\000\022\013\ufff9\016\ufff9\017\ufff9\021\ufff9\026" +
    "\ufff9\027\ufff9\033\ufff9\035\ufff9\001\002\000\004\013\032" +
    "\001\002\000\022\013\ufffa\016\ufffa\017\ufffa\021\ufffa\026" +
    "\ufffa\027\ufffa\033\ufffa\035\ufffa\001\002\000\004\033\ufff3" +
    "\001\002\000\004\002\uffff\001\002\000\004\033\034\001" +
    "\002\000\004\011\035\001\002\000\004\022\036\001\002" +
    "\000\022\013\uffe2\016\uffe2\017\uffe2\021\uffe2\026\uffe2\027" +
    "\uffe2\033\uffe2\035\uffe2\001\002\000\014\010\044\030\045" +
    "\031\042\033\040\034\041\001\002\000\032\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\022\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\001\002\000\032\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\022\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\001\002\000" +
    "\032\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\022\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\001" +
    "\002\000\030\004\053\005\047\006\057\007\054\022\074" +
    "\036\061\037\052\040\050\041\055\042\051\043\060\001" +
    "\002\000\014\010\044\030\045\031\042\033\040\034\041" +
    "\001\002\000\032\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011" +
    "\uffe7\022\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\001\002\000\030\004\053\005\047\006\057\007" +
    "\054\011\056\036\061\037\052\040\050\041\055\042\051" +
    "\043\060\001\002\000\014\010\044\030\045\031\042\033" +
    "\040\034\041\001\002\000\014\010\044\030\045\031\042" +
    "\033\040\034\041\001\002\000\014\010\044\030\045\031" +
    "\042\033\040\034\041\001\002\000\014\010\044\030\045" +
    "\031\042\033\040\034\041\001\002\000\014\010\044\030" +
    "\045\031\042\033\040\034\041\001\002\000\014\010\044" +
    "\030\045\031\042\033\040\034\041\001\002\000\014\010" +
    "\044\030\045\031\042\033\040\034\041\001\002\000\032" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\022\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\001\002" +
    "\000\014\010\044\030\045\031\042\033\040\034\041\001" +
    "\002\000\014\010\044\030\045\031\042\033\040\034\041" +
    "\001\002\000\014\010\044\030\045\031\042\033\040\034" +
    "\041\001\002\000\032\004\053\005\047\006\057\007\054" +
    "\011\uffed\022\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\001\002\000\032\004\053\005\047\006\057" +
    "\007\054\011\uffe8\022\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\001\002\000\032\004\uffef\005\uffef" +
    "\006\uffef\007\054\011\uffef\022\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\001\002\000\032\004\053" +
    "\005\047\006\057\007\054\011\uffea\022\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\001\002\000\032" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\022\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\001\002" +
    "\000\032\004\ufff1\005\047\006\057\007\054\011\ufff1\022" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\001\002\000\032\004\053\005\047\006\057\007\054\011" +
    "\uffec\022\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\001\002\000\032\004\053\005\047\006\057\007" +
    "\054\011\uffe9\022\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\001\002\000\032\004\053\005\047\006" +
    "\057\007\054\011\uffeb\022\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\001\002\000\032\004\ufff0\005" +
    "\ufff0\006\057\007\054\011\ufff0\022\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\001\002\000\022\013" +
    "\ufff5\016\ufff5\017\ufff5\021\ufff5\026\ufff5\027\ufff5\033\ufff5" +
    "\035\ufff5\001\002\000\004\013\ufffd\001\002\000\004\033" +
    "\077\001\002\000\004\011\100\001\002\000\004\022\101" +
    "\001\002\000\022\013\uffe1\016\uffe1\017\uffe1\021\uffe1\026" +
    "\uffe1\027\uffe1\033\uffe1\035\uffe1\001\002\000\004\010\103" +
    "\001\002\000\014\010\044\030\045\031\042\033\040\034" +
    "\041\001\002\000\030\004\053\005\047\006\057\007\054" +
    "\011\105\036\061\037\052\040\050\041\055\042\051\043" +
    "\060\001\002\000\004\012\106\001\002\000\020\016\013" +
    "\017\031\021\022\026\025\027\016\033\024\035\uffe0\001" +
    "\002\000\004\013\110\001\002\000\022\013\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\026\uffdf\027\uffdf\033\uffdf\035\uffdf\001" +
    "\002\000\004\022\112\001\002\000\022\013\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\026\ufff6\027\ufff6\033\ufff6\035\ufff6\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\002\003\015\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\026\004\022\005\017\006" +
    "\027\007\011\011\025\012\016\013\013\014\020\016\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\022\005\017\006\027\007\011\011\025\012\016" +
    "\013\013\014\074\016\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\072\001\001\000\004\010\071\001\001\000\004\010\070" +
    "\001\001\000\004\010\067\001\001\000\004\010\066\001" +
    "\001\000\004\010\065\001\001\000\004\010\064\001\001" +
    "\000\002\001\001\000\004\010\063\001\001\000\004\010" +
    "\062\001\001\000\004\010\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\106\004\022\005\017\006\027\007\011\011" +
    "\025\012\016\013\013\014\020\016\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static void main (String [] args) throws Exception{

		if (args.length!=1)
			System.out.println("Error. No file to process");
		else{
			try{
				
				Lexer lexer = new Lexer(new FileReader(args[0]));	
				new parser(lexer).parse();

			}catch(Exception e){
				
				System.out.println("Error");


			}			
	
	}
}	



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	Program program;
	int memory = 0;
	int whileCounter = 0;

	ArrayList<Statement> auxBody = new ArrayList<Statement>();
	ArrayList<Variable> auxVariables = new ArrayList<Variable>();

	Stack<ArrayList<Statement>> auxStack = new Stack<ArrayList<Statement>>();
	Stack<Integer> auxMemoryStack = new Stack<Integer>();
	Stack<ArrayList<Variable>> auxVariablesStack = new Stack<ArrayList<Variable>>();
	
	private void init(){
	
		program = new Program();
	
	}
	
	
	private void end() throws IOException{
		
		
		CodeGenerator cg = new CodeGenerator(program);
		cg.generateAsm();
		
	
	}



	private Variable getVariable(String id){
		
		boolean found = false;
		Variable v = null;		
	
		Iterator it = auxVariables.iterator();
		
		while (it.hasNext() && !found){

			Variable aux = (Variable) it.next();
			
			if (aux.equals(id)){

				found = true;
				v = aux;
			}
		}

		if (found){
			return v;

		} else {

		it = auxVariablesStack.iterator();

		while (it.hasNext() && !found){

			ArrayList<Variable> aux = (ArrayList<Variable>) it.next();
			
			Iterator<Variable> it2 = aux.iterator();

			while (it2.hasNext() && !found){

				Variable vaux = it2.next();

				if (vaux.equals(id)){

					found = true;
					v = vaux;
				}
			

			
	}
		

	}

	return v;

}

}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // While ::= NT$1 WHILE LPAREN Expression RPAREN LBRACE Body RBRACE 
            {
              WhileStatement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (WhileStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new WhileStatement(whileCounter,e,b);
	whileCounter++;
	program.deleteScope();
	auxBody = auxStack.pop();
	memory = auxMemoryStack.pop();
	auxVariables = auxVariablesStack.pop();	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              WhileStatement RESULT =null;
 	auxStack.push(auxBody);
		auxMemoryStack.push(memory);
		auxBody = new ArrayList<Statement>();
		program.newScope();
		auxVariablesStack.push(auxVariables);
		auxVariables = new ArrayList<Variable>();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Println ::= PRINTLN LPAREN ID RPAREN SEMI 
            {
              PrintLineStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	if (program.containsVariable(id)){
 		RESULT = new PrintLineStatement(getVariable(id));
	} else {

		System.out.println("Error. Variable not declared.");

	 }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Println",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Print ::= PRINT LPAREN ID RPAREN SEMI 
            {
              PrintStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	if (program.containsVariable(id)){
 		RESULT = new PrintStatement(getVariable(id));
	} else {

		System.out.println("Error. Variable not declared.");

	 }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Print",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= LPAREN Expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Variable v = getVariable(id);
			RESULT = new VariableExpression(v);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= STRG 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteralExpression(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= NUM_FLOAT 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(f, memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= NUM_INTEGER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i, memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= Expression GREATEREQUAL Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("<",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= Expression LESSEQUAL Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("<",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= Expression LESS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("<",e1,e2,memory); memory+=4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= Expression GREATER Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(">",e1,e2,memory); memory+=4;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression DIFFERENT Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("!=",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression EQUALS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("==",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression DIV Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("/",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression TIMES Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("*",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= Expression MINUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("-",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression ::= Expression PLUS Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression("+",e1,e2,memory); memory+=4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              String RESULT =null;
		 RESULT = new String("String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = new String("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INTEGER 
            {
              String RESULT =null;
		 RESULT = new String("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Assign ::= ID ASSIGN Expression SEMI 
            {
              AssignStatement RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if (program.containsVariable(id2)){
				Variable v = getVariable(id2);
				RESULT = new AssignStatement(v,e);
			} else {
				System.out.println("Error. Variable not declared.");
			}

			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assign",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= Type ID SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if (program.containsVariable(id)){
					System.out.println("Variable " + id + " is already declared");
					} else {

						if (!t.equals("String")){
						Variable v = new Variable(t,id, memory);
						memory+=4;
						program.addVariable(v);
						auxVariables.add(v);

						} else {
							Variable v = new Variable(t,id, -1);
							program.addVariable(v);
							auxVariables.add(v);
						}
							
					}

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= While 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement w = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 auxBody.add(w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= Println 
            {
              Statement RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrintLineStatement pl = (PrintLineStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 auxBody.add(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= Print 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrintStatement p = (PrintStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 auxBody.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= Assign 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStatement a = (AssignStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 auxBody.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= Declaration 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Statement 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT = auxBody; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statements ::= Statement Statements 
            {
              ArrayList<Statement> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Body ::= Statements 
            {
              BlockStatement RESULT =null;
		 RESULT = new BlockStatement(auxVariables, auxBody); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= NT$0 MAIN LPAREN RPAREN LBRACE Body RBRACE 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				program.setBody(b);
				System.out.println("Analysis finished succesfully");
				end();
				System.out.println("Code generated succesfully");				
  			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Program RESULT =null;
 System.out.println("Beginning the analysis");
			init();
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

